<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        
        <!-- Daily Billing Processing Cron -->
        <record id="cron_ams_process_billing_schedules" model="ir.cron">
            <field name="name">AMS: Process Due Billing Schedules</field>
            <field name="model_id" ref="model_ams_billing_schedule"/>
            <field name="active" eval="True"/>
            <field name="user_id" ref="base.user_root"/>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="code">model.cron_process_due_billing()</field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(hours=2)).strftime('%Y-%m-%d 02:00:00')"/>
        </record>

        <!-- Daily Payment Reminder Cron -->
        <record id="cron_ams_send_payment_reminders" model="ir.cron">
            <field name="name">AMS: Send Payment Reminders</field>
            <field name="model_id" ref="account.model_account_move"/>
            <field name="active" eval="True"/>
            <field name="user_id" ref="base.user_root"/>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="code">model.cron_send_payment_reminders()</field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(hours=10)).strftime('%Y-%m-%d 10:00:00')"/>
        </record>

        <!-- Daily Overdue Invoice Marking Cron -->
        <record id="cron_ams_mark_overdue_invoices" model="ir.cron">
            <field name="name">AMS: Mark Overdue Invoices</field>
            <field name="model_id" ref="account.model_account_move"/>
            <field name="active" eval="True"/>
            <field name="user_id" ref="base.user_root"/>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="code">model.cron_mark_overdue_invoices()</field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(hours=8)).strftime('%Y-%m-%d 08:00:00')"/>
        </record>

        <!-- Daily Billing Events Processing -->
        <record id="cron_ams_process_billing_events" model="ir.cron">
            <field name="name">AMS: Process Pending Billing Events</field>
            <field name="model_id" ref="model_ams_billing_event"/>
            <field name="active" eval="True"/>
            <field name="user_id" ref="base.user_root"/>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="code">model.cron_process_pending_billing_events()</field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(hours=12)).strftime('%Y-%m-%d 12:00:00')"/>
        </record>

        <!-- Weekly Subscription Billing Health Check -->
        <record id="cron_ams_subscription_health_check" model="ir.cron">
            <field name="name">AMS: Subscription Billing Health Check</field>
            <field name="model_id" ref="ams_subscriptions.model_ams_subscription"/>
            <field name="active" eval="True"/>
            <field name="user_id" ref="base.user_root"/>
            <field name="interval_number">1</field>
            <field name="interval_type">weeks</field>
            <field name="code">
# Basic health check for subscription billing
active_subscriptions = env['ams.subscription'].search([
    ('state', '=', 'active'),
    ('enable_auto_billing', '=', True)
])

# Check for subscriptions with overdue invoices
overdue_count = 0
for subscription in active_subscriptions:
    if subscription.has_overdue_invoices:
        overdue_count += 1

# Check for subscriptions without billing schedules
missing_schedules = active_subscriptions.filtered(lambda s: not s.billing_schedule_ids)

# Log health check results
env['ir.logging'].create({
    'name': 'ams_subscription_billing.health_check',
    'type': 'server',
    'level': 'INFO',
    'message': f'Health check: {len(active_subscriptions)} active billing subscriptions, {overdue_count} with overdue invoices, {len(missing_schedules)} missing billing schedules',
    'path': 'ams_subscription_billing',
    'func': 'cron_health_check',
    'line': '0',
})

# Create billing schedules for subscriptions that are missing them
for subscription in missing_schedules:
    try:
        subscription._create_billing_schedule()
    except Exception as e:
        env['ir.logging'].create({
            'name': 'ams_subscription_billing.health_check',
            'type': 'server',
            'level': 'ERROR',
            'message': f'Error creating billing schedule for {subscription.name}: {str(e)}',
            'path': 'ams_subscription_billing',
            'func': 'cron_health_check',
            'line': '0',
        })
            </field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=7)).strftime('%Y-%m-%d 06:00:00')"/>
        </record>

    </data>
</odoo>