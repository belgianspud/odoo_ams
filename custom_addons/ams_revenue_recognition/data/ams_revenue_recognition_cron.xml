<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        
        <!-- Daily Revenue Recognition Processing -->
        <record id="cron_process_revenue_recognition" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Daily Processing</field>
            <field name="model_id" ref="model_ams_revenue_recognition"/>
            <field name="state">code</field>
            <!-- FIXED: Use proper method call instead of complex code -->
            <field name="code">model.process_due_recognitions()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="active" eval="True"/>
            <field name="priority">5</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Set specific time to avoid conflicts -->
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=1)).replace(hour=2, minute=0, second=0, microsecond=0)"/>
        </record>

        <!-- Schedule Processing Cron Job -->
        <record id="cron_process_schedule_recognition" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Schedule Processing</field>
            <field name="model_id" ref="model_ams_revenue_schedule"/>
            <field name="state">code</field>
            <!-- FIXED: Use proper method call -->
            <field name="code">model.cron_process_revenue_recognition()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="active" eval="True"/>
            <field name="priority">6</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Set different time to avoid conflicts -->
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=1)).replace(hour=2, minute=30, second=0, microsecond=0)"/>
        </record>

        <!-- Batch Processing for High Volume (Weekly) -->
        <record id="cron_batch_process_revenue_recognition" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Batch Processing</field>
            <field name="model_id" ref="model_ams_revenue_recognition"/>
            <field name="state">code</field>
            <!-- FIXED: Use simple method call -->
            <field name="code">model.cron_batch_processing()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">weeks</field>
            <field name="active" eval="False"/>
            <field name="priority">7</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Weekly on Sundays at 3 AM -->
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=7)).replace(hour=3, minute=0, second=0, microsecond=0)"/>
        </record>

        <!-- Weekly Summary Report -->
        <record id="cron_weekly_revenue_summary" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Weekly Summary</field>
            <field name="model_id" ref="model_ams_revenue_recognition"/>
            <field name="state">code</field>
            <!-- FIXED: Use simple method call -->
            <field name="code">model.cron_weekly_summary()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">weeks</field>
            <field name="active" eval="True"/>
            <field name="priority">8</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Weekly on Mondays at 8 AM -->
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=7)).replace(hour=8, minute=0, second=0, microsecond=0)"/>
        </record>

        <!-- Monthly Balance Check -->
        <record id="cron_monthly_balance_check" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Monthly Balance Check</field>
            <field name="model_id" ref="model_ams_revenue_schedule"/>
            <field name="state">code</field>
            <!-- FIXED: Use simple method call -->
            <field name="code">model.cron_monthly_balance_check()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="active" eval="True"/>
            <field name="priority">9</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Monthly on the 1st at 6 AM -->
            <field name="nextcall" eval="(DateTime.now().replace(day=1) + timedelta(days=32)).replace(day=1, hour=6, minute=0, second=0, microsecond=0)"/>
        </record>

        <!-- Month-End Processing -->
        <record id="cron_month_end_check" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Month-End Check</field>
            <field name="model_id" ref="model_ams_revenue_schedule"/>
            <field name="state">code</field>
            <!-- FIXED: Use simple method call -->
            <field name="code">model.cron_month_end_check()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="active" eval="True"/>
            <field name="priority">10</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Monthly on the last day at 11 PM -->
            <field name="nextcall" eval="(DateTime.now().replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1, hours=1)"/>
        </record>

        <!-- OPTIONAL: Emergency Cleanup Cron (Disabled by default) -->
        <record id="cron_emergency_revenue_cleanup" model="ir.cron">
            <field name="name">AMS Revenue Recognition - Emergency Cleanup</field>
            <field name="model_id" ref="model_ams_revenue_recognition"/>
            <field name="state">code</field>
            <field name="code">
# Emergency cleanup for stuck recognition entries
stuck_recognitions = model.search([
    ('state', '=', 'pending'),
    ('recognition_date', '&lt;', (fields.Date.today() - datetime.timedelta(days=30)))
])
if stuck_recognitions:
    model.env['ir.logging'].create({
        'name': 'ams_revenue_recognition.emergency_cleanup',
        'type': 'server',
        'level': 'WARNING',
        'message': f'Found {len(stuck_recognitions)} stuck recognition entries older than 30 days',
        'path': 'ams_revenue_recognition.cron',
        'func': 'emergency_cleanup',
        'line': '0',
    })
            </field>
            <field name="interval_number">1</field>
            <field name="interval_type">weeks</field>
            <field name="active" eval="False"/>
            <field name="priority">15</field>
            <field name="user_id" ref="base.user_root"/>
            <!-- FIXED: Weekly on Saturdays at midnight -->
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=7)).replace(hour=0, minute=0, second=0, microsecond=0)"/>
        </record>

    </data>
</odoo>